name: 'Terraform Build and Destroy'

on:
  workflow_dispatch:
    inputs:
        ami_id:
            description: 'AMI ID'
            required: true
            type: string          
permissions:
      id-token: write
      contents: read
      issues: write
jobs:
  terraform_build:
    name: 'Terraform Plan Format and Validate'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Debug input
      run: 'echo "AMI ID received: ${{ github.event.inputs.ami_id }}"'

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: |
        terraform plan \
            -var "region=${{ secrets.AWS_REGION }}" \
            -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var "aws_secret_key=${{ secrets.AWS_SECRET_KEY }}" \
            -var "ami_id=${{ github.event.inputs.ami_id }}"    
        
    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Apply
      run: |
        terraform apply \
            -var "region=${{ secrets.AWS_REGION }}" \
            -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var "aws_secret_key=${{ secrets.AWS_SECRET_KEY }}" \
            -var "ami_id=${{ github.event.inputs.ami_id }}" \
            -auto-approve

    - name: Approve for Terraform Destroy
      uses: thomasvjoseph/manual-approval@v1.0.1
      with:
        INPUT_TITLE: "Manual Approval Request"
        INPUT_BODY: "Please approve or reject by commenting 'yes' or 'no'."
        INPUT_ASSIGNEES: "thomas-jiitak"
  
    - name: Terraform Destroy
      run: |
        terraform destroy \
            -var "region=${{ secrets.AWS_REGION }}" \
            -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var "aws_secret_key=${{ secrets.AWS_SECRET_KEY }}" \
            -var "ami_id=${{ github.event.inputs.ami_id }}" \
            -auto-approve

    - name: Deregister AMI and Delete Snapshots
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        AMI_ID: ${{ github.event.inputs.ami_id }}
      run: |
        echo "Getting snapshot ID for AMI: $AMI_ID"
        SNAPSHOT_ID=$(aws ec2 describe-images \
            --region $AWS_REGION \
            --image-ids "$AMI_ID" \
            --query "Images[].BlockDeviceMappings[].Ebs.SnapshotId" \
            --output text)
      
        echo "Deregistering AMI: $AMI_ID"
        aws ec2 deregister-image --region $AWS_REGION --image-id "$AMI_ID"
      
        echo "Deleting snapshot: $SNAPSHOT_ID"
        if [ -n "$SNAPSHOT_ID" ]; then
            aws ec2 delete-snapshot --region $AWS_REGION --snapshot-id "$SNAPSHOT_ID"
        fi